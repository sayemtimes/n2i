"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Send, Bot, User, BookOpen, Heart, Clock, Lightbulb, Mic, Copy, ThumbsUp, ThumbsDown } from "lucide-react"

interface Message {
  id: number
  type: "user" | "bot"
  content: string
  timestamp: Date
  category?: string
  sources?: string[]
}

export default function AIAssistantPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      type: "bot",
      content:
        "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∞‡¶æ‡¶π‡¶Æ‡¶æ‡¶§‡ßÅ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶ø ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶∞‡¶æ‡¶ï‡¶æ‡¶§‡ßÅ‡¶π‡ßÅ! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶∏‡¶π‡¶ø‡¶π ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      timestamp: new Date(),
      category: "greeting",
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [language, setLanguage] = useState<"bn" | "en">("bn")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const quickQuestions = [
    {
      question: "‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ ‡¶ï‡ßÄ?",
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
      icon: "üïå",
    },
    {
      question: "‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§‡ßá‡¶∞ ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶§?",
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
      icon: "üí∞",
    },
    {
      question: "‡¶∞‡ßã‡¶ú‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶ï‡ßÄ?",
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
      icon: "üåô",
    },
    {
      question: "‡¶π‡¶ú‡ßá‡¶∞ ‡¶´‡¶∞‡¶ú ‡¶ï‡¶Ø‡¶º‡¶ü‡¶ø?",
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
      icon: "üïã",
    },
    {
      question: "‡¶¶‡ßã‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÅ‡¶®‡ßÅ‡¶§ ‡¶ï‡ßÄ?",
      category: "‡¶¶‡ßã‡¶Ø‡¶º‡¶æ",
      icon: "ü§≤",
    },
    {
      question: "‡¶§‡¶ì‡¶¨‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§ ‡¶ï‡ßÄ?",
      category: "‡¶Ü‡¶§‡ßç‡¶Æ‡¶∂‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø",
      icon: "üíö",
    },
    {
      question: "‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶ï‡ßÄ?",
      category: "‡¶Æ‡ßÅ‡¶Ø‡¶º‡¶æ‡¶Æ‡¶æ‡¶≤‡¶æ‡¶§",
      icon: "üè™",
    },
    {
      question: "‡¶™‡¶ø‡¶§‡¶æ-‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶π‡¶ï ‡¶ï‡ßÄ?",
      category: "‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï",
      icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    },
  ]

  const islamicResponses = {
    "‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ ‡¶ï‡ßÄ?": {
      content: `‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶∞‡ßÇ‡¶™:

**‡ßß. ‡¶´‡¶ú‡¶∞:** ‡¶∏‡ßÅ‡¶¨‡¶π‡ßá ‡¶∏‡¶æ‡¶¶‡¶ø‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡ßã‡¶¶‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Ü‡¶ó ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
**‡ß®. ‡¶Ø‡ßã‡¶π‡¶∞:** ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø ‡¶™‡¶∂‡ßç‡¶ö‡¶ø‡¶Æ‡ßá ‡¶¢‡¶≤‡ßá ‡¶™‡¶°‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§  
**‡ß©. ‡¶Ü‡¶∏‡¶∞:** ‡¶Ø‡ßã‡¶π‡¶∞‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ï‡ßç‡¶§ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡¶æ‡¶∏‡ßç‡¶§ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
**‡ß™. ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨:** ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡¶æ‡¶∏‡ßç‡¶§‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡¶´‡¶ï (‡¶≤‡¶æ‡¶≤ ‡¶Ü‡¶≠‡¶æ) ‡¶Ö‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
**‡ß´. ‡¶á‡¶∂‡¶æ:** ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶ï‡ßç‡¶§ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßÅ‡¶¨‡¶π‡ßá ‡¶∏‡¶æ‡¶¶‡¶ø‡¶ï ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§

**‡¶π‡¶æ‡¶¶‡¶ø‡¶∏:** "‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶Æ‡ßÅ‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶´‡¶∞‡¶ú‡•§" (‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶®‡¶ø‡¶∏‡¶æ: ‡ßß‡ß¶‡ß©)`,
      sources: ["‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶®‡¶ø‡¶∏‡¶æ: ‡ßß‡ß¶‡ß©", "‡¶∏‡¶π‡¶ø‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡ßÄ", "‡¶∏‡¶π‡¶ø‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ"],
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
    },
    "‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§‡ßá‡¶∞ ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ï‡¶§?": {
      content: `‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§‡ßá‡¶∞ ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨:

**‡¶∏‡ßç‡¶¨‡¶∞‡ßç‡¶£:** ‡ßÆ‡ß≠.‡ß™‡ßÆ ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ (‡ß≠.‡ß´ ‡¶§‡ßã‡¶≤‡¶æ)
**‡¶∞‡ßå‡¶™‡ßç‡¶Ø:** ‡ß¨‡ßß‡ß®.‡ß©‡ß¨ ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ (‡ß´‡ß®.‡ß´ ‡¶§‡ßã‡¶≤‡¶æ)  
**‡¶®‡¶ó‡¶¶ ‡¶Ö‡¶∞‡ßç‡¶•:** ‡¶∞‡ßå‡¶™‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
**‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶™‡¶£‡ßç‡¶Ø:** ‡¶∞‡ßå‡¶™‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ

**‡¶∂‡¶∞‡ßç‡¶§‡¶æ‡¶¨‡¶≤‡ßÄ:**
- ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶ï ‡¶¨‡¶õ‡¶∞ ‡¶Ö‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
- ‡¶®‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶¶ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá
- ‡¶Æ‡ßå‡¶≤‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶Æ‡ßá‡¶ü‡¶æ‡¶®‡ßã‡¶∞ ‡¶™‡¶∞ ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá

**‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞:** ‡ß®.‡ß´% (‡ß™‡ß¶ ‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡ßß ‡¶≠‡¶æ‡¶ó)

**‡¶Ü‡¶Ø‡¶º‡¶æ‡¶§:** "‡¶Ü‡¶∞ ‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ï‡¶æ‡¶§ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßã‡•§" (‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ: ‡ß™‡ß©)`,
      sources: ["‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ: ‡ß™‡ß©", "‡¶∏‡¶π‡¶ø‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡ßÄ", "‡¶Ü‡¶¨‡ßÅ ‡¶¶‡¶æ‡¶â‡¶¶"],
      category: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§",
    },
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!input.trim()) return

    const userMessage: Message = {
      id: messages.length + 1,
      type: "user",
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    // Simulate AI response with Islamic knowledge
    setTimeout(() => {
      const response = islamicResponses[input as keyof typeof islamicResponses]

      const botMessage: Message = {
        id: messages.length + 2,
        type: "bot",
        content: response
          ? response.content
          : `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® "${input}" ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:

‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡•§ ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ï‡ßá ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ 

**‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶∏‡¶π‡¶ø‡¶π ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶Ü‡¶≤‡ßá‡¶Æ‡¶¶‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶®  
- ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®

**‡¶¶‡ßã‡¶Ø‡¶º‡¶æ:** ÿ±Ÿéÿ®ŸêŸë ÿ≤ŸêÿØŸíŸÜŸêŸä ÿπŸêŸÑŸíŸÖŸãÿß (‡¶π‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∞‡¶¨! ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®)

‡¶Ü‡¶∞‡¶ì ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶Ü‡¶≤‡ßá‡¶Æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
        timestamp: new Date(),
        category: response?.category || "‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£",
        sources: response?.sources || ["‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶®", "‡¶∏‡¶π‡¶ø‡¶π ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏"],
      }
      setMessages((prev) => [...prev, botMessage])
      setIsLoading(false)
    }, 1500)
  }

  const handleQuickQuestion = (question: string) => {
    setInput(question)
  }

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-white to-amber-50 py-8">
      <div className="container mx-auto px-4 max-w-6xl">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold mb-4 bengali-text islamic-text-gradient">‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto bengali-text">
            ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶®‡•§ ‡ß®‡ß™/‡ß≠ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶≠‡¶æ‡¶£‡ßç‡¶°‡¶æ‡¶∞‡•§
          </p>
          <div className="flex justify-center mt-4">
            <div className="flex items-center space-x-2">
              <Button variant={language === "bn" ? "default" : "outline"} size="sm" onClick={() => setLanguage("bn")}>
                ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ
              </Button>
              <Button variant={language === "en" ? "default" : "outline"} size="sm" onClick={() => setLanguage("en")}>
                English
              </Button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Chat Interface */}
          <div className="lg:col-span-3">
            <Card className="border-emerald-200 h-[700px] flex flex-col">
              <CardHeader className="border-b bg-gradient-to-r from-emerald-50 to-amber-50">
                <CardTitle className="flex items-center bengali-text">
                  <Bot className="mr-2 h-5 w-5 text-emerald-600" />
                  AI ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü
                  <Badge variant="secondary" className="ml-2">
                    ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®
                  </Badge>
                </CardTitle>
              </CardHeader>

              {/* Messages */}
              <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.type === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                      className={`flex items-start space-x-2 max-w-[85%] ${message.type === "user" ? "flex-row-reverse space-x-reverse" : ""}`}
                    >
                      <Avatar className="h-8 w-8 flex-shrink-0">
                        <AvatarFallback
                          className={message.type === "user" ? "bg-blue-500 text-white" : "islamic-gradient text-white"}
                        >
                          {message.type === "user" ? <User className="h-4 w-4" /> : <Bot className="h-4 w-4" />}
                        </AvatarFallback>
                      </Avatar>
                      <div
                        className={`rounded-lg p-4 ${
                          message.type === "user"
                            ? "bg-blue-500 text-white"
                            : "bg-white border border-emerald-200 text-gray-800"
                        }`}
                      >
                        <div className="whitespace-pre-wrap text-sm bengali-text leading-relaxed">
                          {message.content}
                        </div>

                        {message.sources && (
                          <div className="mt-3 pt-3 border-t border-emerald-100">
                            <p className="text-xs text-emerald-600 font-medium mb-1">üìö ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞:</p>
                            <div className="flex flex-wrap gap-1">
                              {message.sources.map((source, index) => (
                                <Badge key={index} variant="outline" className="text-xs">
                                  {source}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}

                        <div className="flex items-center justify-between mt-3 pt-2 border-t border-emerald-100">
                          <p className="text-xs opacity-70">{message.timestamp.toLocaleTimeString("bn-BD")}</p>
                          {message.type === "bot" && (
                            <div className="flex items-center space-x-1">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => copyMessage(message.content)}
                                className="h-6 w-6 p-0"
                              >
                                <Copy className="h-3 w-3" />
                              </Button>
                              <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                                <ThumbsUp className="h-3 w-3" />
                              </Button>
                              <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                                <ThumbsDown className="h-3 w-3" />
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex justify-start">
                    <div className="flex items-start space-x-2">
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="islamic-gradient text-white">
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-white border border-emerald-200 rounded-lg p-4">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </CardContent>

              {/* Input */}
              <div className="border-t p-4 bg-gray-50">
                <div className="flex space-x-2">
                  <Input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                    className="flex-1 bengali-text"
                    onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                  />
                  <Button variant="outline" size="icon">
                    <Mic className="h-4 w-4" />
                  </Button>
                  <Button
                    onClick={handleSendMessage}
                    disabled={!input.trim() || isLoading}
                    className="islamic-gradient text-white"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Questions */}
            <Card className="border-emerald-200">
              <CardHeader>
                <CardTitle className="flex items-center bengali-text">
                  <Lightbulb className="mr-2 h-5 w-5 text-amber-600" />
                  ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {quickQuestions.map((item, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    className="w-full text-left justify-start h-auto p-3 bengali-text"
                    onClick={() => handleQuickQuestion(item.question)}
                  >
                    <span className="mr-2">{item.icon}</span>
                    <div className="text-left">
                      <div className="font-medium">{item.question}</div>
                      <div className="text-xs text-gray-500">{item.category}</div>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Features */}
            <Card className="border-emerald-200">
              <CardHeader>
                <CardTitle className="bengali-text">‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center space-x-2">
                  <BookOpen className="h-4 w-4 text-emerald-600" />
                  <span className="text-sm bengali-text">‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶® ‡¶ì ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Heart className="h-4 w-4 text-red-500" />
                  <span className="text-sm bengali-text">‡¶Ü‡¶ß‡ßç‡¶Ø‡¶æ‡¶§‡ßç‡¶Æ‡¶ø‡¶ï ‡¶ó‡¶æ‡¶á‡¶°‡ßá‡¶®‡ßç‡¶∏</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-blue-500" />
                  <span className="text-sm bengali-text">‡ß®‡ß™/‡ß≠ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Lightbulb className="h-4 w-4 text-amber-500" />
                  <span className="text-sm bengali-text">‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞</span>
                </div>
              </CardContent>
            </Card>

            {/* Categories */}
            <Card className="border-emerald-200">
              <CardHeader>
                <CardTitle className="bengali-text">‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶∏‡¶Æ‡ßÇ‡¶π</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {[
                  { name: "‡¶á‡¶¨‡¶æ‡¶¶‡¶§", icon: "üïå", count: 45 },
                  { name: "‡¶Ü‡¶ï‡¶ø‡¶¶‡¶æ", icon: "üíö", count: 32 },
                  { name: "‡¶Æ‡ßÅ‡¶Ø‡¶º‡¶æ‡¶Æ‡¶æ‡¶≤‡¶æ‡¶§", icon: "üè™", count: 28 },
                  { name: "‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", count: 24 },
                  { name: "‡¶Ü‡¶§‡ßç‡¶Æ‡¶∂‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø", icon: "‚ú®", count: 38 },
                ].map((category, index) => (
                  <div key={index} className="flex items-center justify-between p-2 rounded hover:bg-emerald-50">
                    <div className="flex items-center space-x-2">
                      <span>{category.icon}</span>
                      <span className="text-sm bengali-text">{category.name}</span>
                    </div>
                    <Badge variant="secondary" className="text-xs">
                      {category.count}
                    </Badge>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Disclaimer */}
            <Card className="border-amber-200 bg-amber-50">
              <CardContent className="p-4">
                <p className="text-sm text-amber-800 bengali-text">
                  <strong>‡¶¶‡ßç‡¶∞‡¶∑‡ßç‡¶ü‡¶¨‡ßç‡¶Ø:</strong> ‡¶è‡¶á AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ó‡¶æ‡¶á‡¶°‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡¶Ø‡¶º ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶Ü‡¶≤‡ßá‡¶Æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá
                  ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
